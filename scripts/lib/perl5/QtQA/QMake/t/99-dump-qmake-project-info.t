#!/usr/bin/env perl
use strict;
use warnings;

=head1 NAME

99-dump-qmake-project-info.t - manual test, dumps qmake project info from a build tree.

=head1 SYNOPSIS

  perl 99-dump-qmake-project-info.t ~/path/to/qtbase

Dumps a bunch of information about all found qmake projects under the given directory,
which can be manually checked for correctness.

Since it is quite challenging to come up with a realistic test set of qmake projects
for testing the QtQA::QMake::Project package, this script can be used to exercise
that package over all the files found in a given build tree.  A one-line summary
is printed for each found project, which should then be sanity checked.

=cut

use FindBin;
use lib "$FindBin::Bin/../../..";

use QtQA::QMake::Project;
use File::chdir;
use File::Spec::Functions;
use File::Find::Rule;
use Test::More;

use feature qw(say);

my %totals = (
    app => 0,
    lib => 0,
    testcase => 0,
    insignificant_test => 0,
);

sub dump_interesting_info
{
    my ($prj) = @_;

    my $_PRO_FILE_PWD_ = $prj->values( '_PRO_FILE_PWD_' );
    my $TARGET = $prj->values( 'TARGET' );
    my $TEMPLATE = $prj->values( 'TEMPLATE' );
    my $testcase = $prj->test( 'testcase' );
    my $insignificant_test = $prj->test( 'insignificant_test' );
    my @sources = $prj->values( 'SOURCES' );

    ++$totals{ "$TEMPLATE" };
    if ($testcase) {
        ++$totals{ 'testcase' };
        if ($insignificant_test) {
            ++$totals{ 'insignificant_test' };
        }
    }

    my $out = "$_PRO_FILE_PWD_ => $TARGET [$TEMPLATE]";
    if (@sources) {
        $out .= ', '.scalar(@sources).' sources';
    }
    if ($testcase) {
        $out .= ', testcase'.( $insignificant_test ? ' (insignificant!)' : '');
    }

    say $out;

    return;
}

sub test_makefiles
{
    my ($build_tree) = @_;

    local $CWD = $build_tree;

    my $find = File::Find::Rule
        ->file()                      # must be a file...
        ->name( 'Makefile' )          # named "Makefile"... (note: do not care about debug/release)
        ->grep( qr{\Q$(QMAKE)\E} )   # must be generated by qmake
        ->start( '.' )                # in the given tree
    ;

    my $prj = QtQA::QMake::Project->new( );

    my $count = 0;
    while (my $makefile = $find->match( )) {
        ++$count;
        $prj->set_makefile( $makefile );
        eval {
            dump_interesting_info( $prj );
        };
        if (my $error = $@) {
            warn "$makefile => error: $error\n";
        }
    }

    say "Total: $count project(s), "
       ."$totals{ testcase } testcase(s) ($totals{ insignificant_test } insignificant), "
       ."$prj->{ _qmake_count } qmake runs";

    return;
}

sub run_test
{
    my (@args) = @_;
    SKIP: {
        skip( 'This is a manual test, see docs for info', 1 ) unless @args;
        is( @args, 1 ) || return;
        test_makefiles( $args[0] );
    }

    return;
}

if (!caller) {
    run_test( @ARGV );
    done_testing;
}
1;
